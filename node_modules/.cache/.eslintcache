[{"/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/index.js":"1","/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/App.js":"2","/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/components/Start/Start.js":"3","/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/components/Footer/Footer.js":"4"},{"size":255,"mtime":1720467949361,"results":"5","hashOfConfig":"6"},{"size":378,"mtime":1720467949361,"results":"7","hashOfConfig":"6"},{"size":7115,"mtime":1720467949361,"results":"8","hashOfConfig":"6"},{"size":1216,"mtime":1720467949361,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eoag3h",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/index.js",[],[],"/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/App.js",["24"],[],"import './App.css';\nimport { BrowserRouter, Route, Routes, Navigate } from \"react-router-dom\";\nimport Start from \"./components/Start/Start.js\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/\" element={<Start />} />\n          </Routes>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/components/Start/Start.js",["25","26"],[],"import React, { useState, useEffect } from 'react';\nimport positTitle from \"../../images/posit.png\"\nimport \"./Start.css\";\nimport MAS from \"../../images/flecha-arriba.png\";\nimport MENOS from \"../../images/flecha-hacia-abajo.png\";\nimport Footer from \"../Footer/Footer\";\nimport victorySound from \"../../sounds/pokemonVictoria.mp3\";\nimport defeatSound from \"../../sounds/trompetaComedia.mp3\";\nimport nextLevelSound from \"../../sounds/pokemonNext.mp3\";\n\nexport default function Start() {\n    const [nivel, setNivel] = useState(1);\n    const [valorInput, setValorInput] = useState('');\n    const [mensaje, setMensaje] = useState('Introduce un número del 1 al 10');\n    const [intentos, setIntentos] = useState(10);\n    const [historial, setHistorial] = useState([]);\n    const [totalIntentos, setTotalIntentos] = useState(0);\n    const [numeroAleatorio, setNumeroAleatorio] = useState(generarNumeroAleatorio(1, 10));\n    const [imagenFlecha, setImagenFlecha] = useState(null);\n    const [juegoTerminado, setJuegoTerminado] = useState(false);\n    const audioFinal = new Audio(victorySound);\n    const audioError = new Audio(defeatSound);\n    const audioNext = new Audio(nextLevelSound);\n\n    // Numero aleatorio\n    function generarNumeroAleatorio(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Subir de nivel\n    const actualizarDificultad = () => {\n        return 10 * Math.pow(2, nivel - 1);\n    };\n\n    // Numero seleccionado\n    const manejarCambioInput = (event) => {\n        setValorInput(event.target.value);\n    };\n\n    // Reiniciar juego\n    const reiniciarJuego = () => {\n        setNivel(1);\n        setValorInput('');\n        setMensaje('Introduce un número del 1 al 10');\n        setIntentos(10);\n        setHistorial([]);\n        setTotalIntentos(0);\n        setNumeroAleatorio(generarNumeroAleatorio(1, actualizarDificultad()));\n        setImagenFlecha(null);\n        setJuegoTerminado(false);\n    };\n\n    // Logica del juego\n    const checkingNumber = () => {\n        const numeroUsuario = parseInt(valorInput, 10);\n\n        if (isNaN(numeroUsuario)) {\n            setMensaje(`Por favor, ingrese un número válido`);\n        } else if (numeroUsuario < 1 || numeroUsuario > actualizarDificultad()) {\n            setMensaje(`Por favor, ingrese un número entre 1 y ${actualizarDificultad()}.`);\n        } else {\n            setIntentos(intentos - 1);\n\n            let mensajePrincipal = '';\n            let mensajeSecundario = '';\n            let flecha = null;\n\n            if (numeroUsuario < numeroAleatorio) {\n                mensajePrincipal = `El número que buscas es MAYOR que ${valorInput}.`;\n                mensajeSecundario = `Del 1 a ${actualizarDificultad()}`\n                flecha = <img className='flechita' src={MAS} alt=''/>;\n                setTotalIntentos(totalIntentos + 1);\n            } else if (numeroUsuario > numeroAleatorio) {\n                mensajePrincipal = `El número que buscas es MENOR que ${valorInput}.`;\n                mensajeSecundario = `Del 1 a ${actualizarDificultad()}`\n                flecha = <img className='flechita' src={MENOS} alt=''/>;\n                setTotalIntentos(totalIntentos + 1);\n            } else if (nivel < 10) {\n                setValorInput(\"\");\n                setIntentos(10);\n\n                // Subir de nivel\n                setNivel(nivel + 1);\n\n                // Agregar historial de numeros\n                setTotalIntentos(totalIntentos + 1);\n\n                // Generar nuevo número aleatorio\n                const nuevoNumeroAleatorio = generarNumeroAleatorio(1, actualizarDificultad());\n                setNumeroAleatorio(nuevoNumeroAleatorio);\n\n                // Mostrar mensaje durante 3 segundos\n                audioNext.play();\n                setMensaje(\n                    <>\n                    ¡Correcto! el numero era el {numeroAleatorio}\n                    <br />\n                    ¡Subes de nivel!\n                    </>\n                );\n                \n                setTimeout(() => {\n                    setMensaje(`Introduce un número del 1 al ${actualizarDificultad() * 2}`);\n                }, 1500);\n                \n                // Salir de la función para evitar la actualización duplicada de estado\n                return;\n            } else {\n                setTotalIntentos(totalIntentos + 1);\n                setJuegoTerminado(true);\n                setHistorial([...historial, `Nivel ${nivel}: ${10 - intentos} intentos`]);\n\n                \n                mensajePrincipal = `¡Enhorabuena! Has completado el juego en ${totalIntentos + 1} intentos`;\n                audioFinal.play();\n                setMensaje(\n                    <>\n                        <p className='msj1'>{mensajePrincipal}</p>\n                        <button className='custom-button' onClick={() => {reiniciarJuego()}}>Volver a jugar</button>\n                    </>\n                )\n                return;\n            }\n\n            // Intentos agotados\n            if (intentos === 1 && !juegoTerminado) {\n                audioError.play();\n                setMensaje(`¡Oh no! Has agotado tus intentos. Has perdido. Vuelve a intentarlo.`);\n                \n                setTimeout(() => {\n                    reiniciarJuego();\n                }, 3000);\n            } else if (!juegoTerminado) {\n                setMensaje(\n                    <>\n                        <p className='msj1'>{mensajePrincipal}</p>\n                        {flecha}\n                        <p className='msj2'>{mensajeSecundario}</p>\n                    </>\n                );\n            } else if (juegoTerminado) {\n                setMensaje(\n                    <>\n                    <p className='msj1'>{mensajePrincipal}</p>\n                    <button>Volver a jugar</button>\n                </>\n                )\n            }\n        }\n    };\n\n\n    // Usar ENTER para \n    const manejarEnter = (event) => {\n        if (event.key === 'Enter') {\n            checkingNumber();\n            setValorInput(\"\");\n        }\n    };\n\n    return (\n        <div className='flex'>\n            <img className='imgPosit' src={positTitle} alt=''/>\n            <h1 className='level'>Nivel: {nivel}</h1>\n            <div className='board flex myFont'>\n                <div className='flexEnd'>\n                    Intentos: {intentos}\n                </div>\n                <div className='insideBoard flex'>\n                    {mensaje}\n                </div>\n            </div>\n            <div>\n                <input \n                    className='custom-input'\n                    type=\"number\" \n                    id=\"input\" \n                    name=\"nombre\" \n                    value={valorInput}\n                    onChange={manejarCambioInput}\n                    onKeyDown={manejarEnter}\n                    placeholder={`Número entre 1 y ${actualizarDificultad()}`}\n                />\n                <button className='custom-button' onClick={checkingNumber}>Enviar</button>\n            </div>\n            <Footer/>\n            \n\n        </div>\n    );\n}\n","/home/wahandri/Documentos/proyectos/GessTheNumber/gess-the-number/src/components/Footer/Footer.js",[],[],{"ruleId":"27","severity":1,"message":"28","line":2,"column":40,"nodeType":"29","messageId":"30","endLine":2,"endColumn":48},{"ruleId":"27","severity":1,"message":"31","line":1,"column":27,"nodeType":"29","messageId":"30","endLine":1,"endColumn":36},{"ruleId":"27","severity":1,"message":"32","line":19,"column":12,"nodeType":"29","messageId":"30","endLine":19,"endColumn":24},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'imagenFlecha' is assigned a value but never used."]